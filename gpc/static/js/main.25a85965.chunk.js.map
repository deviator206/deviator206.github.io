{"version":3,"sources":["components/Capture.PNG","components/InvoiceGeneration.js","components/PatientDetailsComponent.js","components/ProcedureDetailsComponent.js","components/CreateInvoice.js","components/SendMRI.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","InvoiceGeneration","props","state","getListOfProcedures","bind","PageRef","React","createRef","this","newProcedures","newPatient","setState","invoiceId","ptInvoice","invoiceDate","ptDate","patientName","ptName","patientAge","ptAge","patientAddress","ptAddress","procedureList","procedureListView","finalTotal","forEach","singleProcedure","parseInt","price","push","name","Container","targetRef","filename","options","orientation","toPdf","onClick","Row","ref","Col","xs","className","Image","src","Capture","style","width","borderTop","textDecoration","Table","striped","bordered","hover","border","penColor","canvasProps","height","textAlign","Component","PatientDetailsComponent","handleChangePtName","handleChangePtAge","handleChangePtAddress","handleDateChange","handleChangePtInvoice","event","target","value","toUpperCase","evt","currentTarget","Fragment","InputGroup","Text","id","type","onChange","FormControl","placeholder","aria-label","aria-describedby","as","ProcedureDetailsComponent","saveProcedure","getAddedProceduresView","handleProChange","handleChangeProName","handleChangeProCharge","removeProcedure","addedList","foundIndex","singleElement","index","splice","key","singleProCharges","singleProName","newList","timestamp","Date","getUTCMilliseconds","console","log","Button","variant","size","md","CreateInvoice","patientDetailsRef","procedureDetailsRef","proceedNextStep","proceedBackStep","renderPatientDetails","renderProcedureDetails","renderBackStep","renderPreviewMode","pageState","current","SendMRI","Home","Card","Body","Title","to","Boolean","window","location","hostname","match","ReactDOM","render","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAOC,QAAU,IAA0B,qC,2UCatBC,E,YACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,GACb,EAAKC,oBAAsB,EAAKA,oBAAoBC,KAAzB,gBAC3B,EAAKC,QAAUC,IAAMC,YAJN,E,iFAME,IAAD,EACoBC,KAAKP,MAAlCQ,EADS,EACTA,cAAeC,EADN,EACMA,WACtBF,KAAKG,SAAS,CACVC,UAAWF,GAAcA,EAAWG,UAAY,eAAeH,EAAWG,UAAW,GACrFC,YAAaJ,GAAcA,EAAWK,OAASL,EAAWK,OAAQ,GAClEC,YAAcN,GAAcA,EAAWO,OAASP,EAAWO,OAAQ,GACnEC,WAAaR,GAAcA,EAAWS,MAAQT,EAAWS,MAAO,GAChEC,eAAgBV,GAAcA,EAAWW,UAAYX,EAAWW,UAAW,GAC3EC,cAAeb,M,4CAKA,IAAD,EACaD,KAAKN,MAA5BoB,cACFC,EAAoB,GACtBC,EAAa,EAqBjB,YAxBkB,MACM,GADN,GAIJC,SAAQ,SAACC,GACnBF,GAAcG,SAASD,EAAgBE,OACvCL,EAAkBM,KACd,4BAEI,4BAAKH,EAAgBI,MACrB,4BAAKJ,EAAgBE,MAAQ,IAA7B,aAIRJ,EAAa,GACbD,EAAkBM,KACd,4BAEI,uCACA,4BAAKL,EAAa,IAAlB,UAKLD,I,+BAKP,IADK,EAMuEf,KAAKN,MAAzEY,EANH,EAMGA,YAAaE,EANhB,EAMgBA,YAAaE,EAN7B,EAM6BA,WAAYE,EANzC,EAMyCA,eAAgBR,EANzD,EAMyDA,UAC9D,OAAO,kBAACmB,EAAA,EAAD,KACH,mDAEA,kBAAC,IAAD,CAAYC,UAAWxB,KAAKH,QAAS4B,SAAS,eAAeC,QAPjD,CACZC,YAAa,cAOR,gBAAGC,EAAH,EAAGA,MAAH,OACG,4BAAQC,QAASD,GAAjB,mBAGR,kBAACE,EAAA,EAAD,CAAKC,IAAK/B,KAAKH,SACf,kBAACmC,EAAA,EAAD,CAAKC,GAAI,IACL,kBAACH,EAAA,EAAD,KAEI,kBAACE,EAAA,EAAD,KAAK,+BAIT,kBAACF,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,KACI,yBAAKE,UAAU,iBACf,kBAACC,EAAA,EAAD,CAAOC,IAAKC,IAASC,MAAO,CAACC,MAAM,aAK3C,kBAACT,EAAA,EAAD,KAEI,kBAACE,EAAA,EAAD,KACI,wBAAIM,MAAO,CAAEE,UAAW,uBAIhC,kBAACV,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAKC,GAAI,GACL,yDACA,kDACA,iDAEJ,kBAACD,EAAA,EAAD,KACJ,wBAAIE,UAAU,uBAAd,QAA0C9B,GAClC,wBAAI8B,UAAU,uBAAd,SAA2C5B,KAGnD,kBAACwB,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,KACI,wBAAIM,MAAO,CAAEE,UAAW,uBAKhC,kBAACV,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,KACI,wBAAIM,MAAO,CAAEG,eAAgB,cAA7B,qBACA,qCAAYjC,GACZ,oCAAWE,GACX,wCAAeE,KAKvB,kBAACkB,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,KACI,wBAAIM,MAAO,CAAEE,UAAW,uBAIhC,kBAACV,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,KACI,kBAACU,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GACzB,+BACI,4BACI,2CACA,yCAGR,+BACK7C,KAAKL,0BAOtB,kBAACmC,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,KACI,wBAAIM,MAAO,CAAEE,UAAW,uBAMhC,kBAACV,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAKC,GAAI,IAGT,kBAACD,EAAA,EAAD,CAAKM,MAAO,CAAEQ,OAAQ,oBAElB,kBAAC,IAAD,CAAiBC,SAAS,OACtBhB,IAAK,SAACA,GAAsBA,GAC5BiB,YAAa,CAAET,MAAO,IAAKU,OAAQ,IAAKf,UAAW,eACvD,4DAGR,kBAACJ,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,KACI,wBAAIM,MAAO,CAAEE,UAAW,uBAIhC,kBAACV,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,KACA,wBAAIM,MAAO,CAACY,UAAU,WAAtB,wBAGJ,kBAACpB,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,KACA,wBAAIM,MAAO,CAACY,UAAU,WAAtB,mFAGJ,kBAACpB,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,KACA,mK,GA/K2BlC,IAAMqD,W,gBCNhCC,E,YAEjB,WAAY3D,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,GACb,EAAK2D,mBAAqB,EAAKA,mBAAmBzD,KAAxB,gBAC1B,EAAK0D,kBAAoB,EAAKA,kBAAkB1D,KAAvB,gBACzB,EAAK2D,sBAAwB,EAAKA,sBAAsB3D,KAA3B,gBAC7B,EAAK4D,iBAAmB,EAAKA,iBAAiB5D,KAAtB,gBACxB,EAAK6D,sBAAwB,EAAKA,sBAAsB7D,KAA3B,gBAPf,E,mFAUI8D,GAClB1D,KAAKG,SAAS,CAAE,UAAauD,EAAMC,OAAOC,MAAMC,kB,uCAGnCC,GACb9D,KAAKG,SAAS,CACVI,OAAQuD,EAAIC,cAAcH,U,0CAM9B5D,KAAKG,SAAS,CACVM,OAAO,GACPE,MAAM,GACNE,UAAU,GACVN,OAAQ,GACRF,UAAU,O,yCAICqD,GACf1D,KAAKG,SAAS,CAAE,OAAUuD,EAAMC,OAAOC,MAAMC,kB,wCAE/BH,GACd1D,KAAKG,SAAS,CAAE,MAASuD,EAAMC,OAAOC,MAAMC,kB,4CAE1BH,GAClB1D,KAAKG,SAAS,CAAE,UAAauD,EAAMC,OAAOC,MAAMC,kB,+BAIhD,OACI,kBAAC,IAAMG,SAAP,KACI,kBAAClC,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,KAAK,mDAIT,kBAACF,EAAA,EAAD,CAAKI,UAAU,cACX,kBAACF,EAAA,EAAD,KACI,kBAACiC,EAAA,EAAWC,KAAZ,CAAiBC,GAAG,gBAApB,WAEJ,kBAACnC,EAAA,EAAD,KACI,2BAAOoC,KAAK,OAAOR,MAAO5D,KAAKN,MAAMa,OAAQ8D,SAAUrE,KAAKwD,qBAGpE,kBAAC1B,EAAA,EAAD,CAAKI,UAAU,cACX,kBAACF,EAAA,EAAD,KACI,kBAACiC,EAAA,EAAWC,KAAZ,CAAiBC,GAAG,gBAApB,iBAEJ,kBAACnC,EAAA,EAAD,KACI,kBAACsC,EAAA,EAAD,CACIC,YAAY,UACZX,MAAO5D,KAAKN,MAAMW,UAClBgE,SAAUrE,KAAKyD,0BAM3B,kBAAC3B,EAAA,EAAD,CAAKI,UAAU,cACX,kBAACF,EAAA,EAAD,KACI,kBAACiC,EAAA,EAAWC,KAAZ,CAAiBC,GAAG,gBAApB,mBAIR,kBAACrC,EAAA,EAAD,CAAKI,UAAU,cACX,kBAACF,EAAA,EAAD,KACI,kBAACsC,EAAA,EAAD,CACIC,YAAY,UACZC,aAAW,UACXC,mBAAiB,eACjBb,MAAO5D,KAAKN,MAAMe,OAClB4D,SAAUrE,KAAKqD,uBAM3B,kBAACvB,EAAA,EAAD,CAAKI,UAAU,cACX,kBAACF,EAAA,EAAD,KACI,kBAACiC,EAAA,EAAWC,KAAZ,CAAiBC,GAAG,gBAApB,kBAIR,kBAACrC,EAAA,EAAD,CAAKI,UAAU,cACX,kBAACF,EAAA,EAAD,KACI,kBAACsC,EAAA,EAAD,CACIC,YAAY,SACZC,aAAW,UACXC,mBAAiB,eACjBb,MAAO5D,KAAKN,MAAMiB,MAClB0D,SAAUrE,KAAKsD,sBAM3B,kBAACxB,EAAA,EAAD,CAAKI,UAAU,cACX,kBAACF,EAAA,EAAD,KACI,kBAACiC,EAAA,EAAWC,KAAZ,CAAiBC,GAAG,gBAApB,sBAIR,kBAACrC,EAAA,EAAD,CAAKI,UAAU,cACX,kBAACF,EAAA,EAAD,KACI,kBAACsC,EAAA,EAAD,CAAaI,GAAG,WAAWF,aAAW,gBACtCZ,MAAO5D,KAAKN,MAAMmB,UAClBwD,SAAUrE,KAAKuD,+B,GAzHczD,IAAMqD,W,QCEtCwB,E,YAEjB,WAAYlF,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,GACb,EAAKkF,cAAgB,EAAKA,cAAchF,KAAnB,gBACrB,EAAKD,oBAAsB,EAAKA,oBAAoBC,KAAzB,gBAC3B,EAAKiF,uBAAyB,EAAKA,uBAAuBjF,KAA5B,gBAC9B,EAAKkF,gBAAkB,EAAKA,gBAAgBlF,KAArB,gBACvB,EAAKmF,oBAAsB,EAAKA,oBAAoBnF,KAAzB,gBAC3B,EAAKoF,sBAAwB,EAAKA,sBAAsBpF,KAA3B,gBAC7B,EAAKqF,gBAAkB,EAAKA,gBAAgBrF,KAArB,gBATR,E,6EAaf,OAAOI,KAAKN,Q,sCAEAyE,GAAK,IAAD,EACSnE,KAAKN,MAAvBwF,iBADS,MACG,GADH,EAEZC,GAAc,EAClBD,EAAUjE,SAAQ,SAACmE,EAAeC,GAC3BD,EAAcjB,IAAMA,IACnBgB,EAAaE,OAGF,IAAhBF,IACCD,EAAUI,OAAOH,EAAY,GAC7BnF,KAAKG,SAAS,CACV+E,iB,0CAKQxB,GAChB1D,KAAKG,SAAS,CAAE,cAAiBuD,EAAMC,OAAOC,MAAMC,kB,4CAElCH,GAClB1D,KAAKG,SAAS,CAAE,iBAAoBuD,EAAMC,OAAOC,MAAMC,kB,sCAG3CC,EAAKyB,GACjBvF,KAAKG,SAAL,eAAiBoF,EAAMzB,EAAIH,OAAOC,MAAMC,kB,0CAGxC7D,KAAKG,SAAS,CACVqF,iBAAkB,EAClBC,cAAe,GACfP,UAAW,O,sCAIF,IAAD,EACyDlF,KAAKN,MAD9D,IACJ8F,wBADI,MACe,EADf,MACkBC,qBADlB,MACkC,GADlC,MACsCP,UAC9CQ,OAFQ,MACkD,GADlD,EAGZ,GAAIF,GAAoBA,EAAmB,GAAKC,EAAe,CAC3D,IAAME,GAAY,IAAIC,MAAOC,qBAC7BH,EAAQrE,KAAK,CACT8C,GAAGwB,EACHvE,MAAOoE,EACPlE,KAAMmE,IAEVK,QAAQC,IAAIL,GACZ1F,KAAKG,SAAS,CACVqF,iBAAkB,EAClBC,cAAe,GACfP,UAAWQ,O,4CAMA,IAAD,EACS1F,KAAKN,MAAxBwF,iBADU,MACE,GADF,EAEZD,EAAkBjF,KAAKiF,gBACvBlE,EAAoB,GACtBC,EAAa,EA4BjB,OA3BAkE,EAAUjE,SAAQ,SAACC,GACfF,GAAcG,SAASD,EAAgBE,OACvCL,EAAkBM,KACd,wBAAIkE,IAAKrE,EAAgBiD,IAErB,4BAAKjD,EAAgBI,MACrB,4BAAKJ,EAAgBE,MAAQ,IAA7B,QACA,4BACI,kBAAC4E,EAAA,EAAD,CAAQC,QAAQ,SAASC,KAAK,KAAKrE,QAAS,WACxCoD,EAAgB/D,EAAgBiD,MADpC,gBASZnD,EAAa,GACbD,EAAkBM,KACd,4BAEI,uCACA,4BAAKL,EAAa,IAAlB,UAKLD,I,+CAGP,OACI,kBAACe,EAAA,EAAD,CAAKI,UAAU,cACX,kBAACF,EAAA,EAAD,KACI,kBAACU,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GACzB,+BACI,4BACI,2CACA,uCACA,wCAGR,+BACK7C,KAAKL,4B,+BAU1B,OACI,kBAAC,IAAMqE,SAAP,KACI,kBAAClC,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,KAAK,qDAIRhC,KAAK6E,yBAEN,kBAAC/C,EAAA,EAAD,CAAKI,UAAU,cACX,kBAACF,EAAA,EAAD,KACI,kBAACiC,EAAA,EAAWC,KAAZ,CAAiBC,GAAG,gBAApB,uBAGR,kBAACrC,EAAA,EAAD,CAAKI,UAAU,cACX,kBAACF,EAAA,EAAD,KACI,kBAACsC,EAAA,EAAD,CACIC,YAAY,YACZC,aAAW,UACXC,mBAAiB,eACjBb,MAAO5D,KAAKN,MAAM+F,cAClBpB,SAAUrE,KAAK+E,wBAM3B,kBAACjD,EAAA,EAAD,CAAKI,UAAU,cACX,kBAACF,EAAA,EAAD,KACI,kBAACiC,EAAA,EAAWC,KAAZ,CAAiBC,GAAG,gBAApB,0BAGR,kBAACrC,EAAA,EAAD,CAAKI,UAAU,cACX,kBAACF,EAAA,EAAD,KACI,kBAACsC,EAAA,EAAD,CACIC,YAAY,UACZC,aAAW,UACXC,mBAAiB,eACjBb,MAAO5D,KAAKN,MAAM8F,iBAClBnB,SAAUrE,KAAKgF,0BAQ3B,kBAAClD,EAAA,EAAD,CAAKI,UAAU,cACX,kBAACF,EAAA,EAAD,CAAKmE,GAAI,IAET,kBAACnE,EAAA,EAAD,CAAKmE,GAAI,IAET,kBAACnE,EAAA,EAAD,CAAKmE,GAAI,GACL,kBAACH,EAAA,EAAD,CAAQC,QAAQ,kBAAkBpE,QAAS7B,KAAK4E,eAAhD,gB,GArL+B9E,IAAMqD,WCGxCiD,E,YACjB,WAAY3G,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,GACb,EAAK2G,kBAAoBvG,IAAMC,YAC/B,EAAKuG,oBAAsBxG,IAAMC,YACjC,EAAKwG,gBAAkB,EAAKA,gBAAgB3G,KAArB,gBACvB,EAAK4G,gBAAkB,EAAKA,gBAAgB5G,KAArB,gBACvB,EAAK6G,qBAAuB,EAAKA,qBAAqB7G,KAA1B,gBAC5B,EAAK8G,uBAAyB,EAAKA,uBAAuB9G,KAA5B,gBAC9B,EAAK+G,eAAiB,EAAKA,eAAe/G,KAApB,gBACtB,EAAKgH,kBAAoB,EAAKA,kBAAkBhH,KAAvB,gBAVV,E,iFAaE,IAAD,EAC8CI,KAAKN,MADnD,IACVmH,iBADU,MACE,EADF,MACK5G,qBADL,MACqB,GADrB,MACyBC,kBADzB,MACsC,GADtC,EAEhB,GAAkB,IAAd2G,EACA,OACI,kBAAC,EAAD,CAAmB5G,cAAeA,EAAeC,WAAYA,M,uCAKvD,IAAD,EACWF,KAAKN,MAAvBmH,UACN,GAAkB,UAFL,MACK,EADL,GAGT,OACI,kBAAC/E,EAAA,EAAD,CAAKI,UAAU,cACX,kBAACF,EAAA,EAAD,KACI,kBAACgE,EAAA,EAAD,CAAQC,QAAQ,OAAOpE,QAAS7B,KAAKwG,iBAArC,a,+CAMM,IAAD,EACGxG,KAAKN,MAAvBmH,UACN,GAAkB,UAFG,MACH,EADG,GAGjB,OACI,kBAAC,EAAD,CAA2B9E,IAAK/B,KAAKsG,wB,6CAKzB,IAAD,EACKtG,KAAKN,MAAvBmH,UACN,GAAkB,UAFC,MACD,EADC,GAGf,OACI,kBAAC,EAAD,CAAyB9E,IAAK/B,KAAKqG,sB,wCAI5B,IAAD,EACUrG,KAAKN,MAAvBmH,iBADQ,MACI,EADJ,EAGVA,GAAa,IACbA,IACA7G,KAAKG,SAAS,CAAE0G,eAEpBf,QAAQC,IAAI,YAAac,K,wCAGV,IAAD,EACU7G,KAAKN,MAAvBmH,iBADQ,MACI,EADJ,EAEV5G,EAAgB,GAChBC,EAAa,CACbO,OAAO,GACPE,MAAM,GACNE,UAAU,IAEd,OAAQgG,GACJ,KAAK,EACD3G,EAAU,eAAOF,KAAKqG,kBAAkBS,QAAQpH,OAChDmH,IACAf,QAAQC,IAAI,eAAe7F,GAC3BF,KAAKG,SAAS,CAAE0G,UAAWA,EAAY3G,eACvC,MACJ,KAAK,EACDD,EAAgBD,KAAKsG,oBAAoBQ,QAAQpH,MAAMwF,UACvD2B,IACAf,QAAQC,IAAI,kBAAkB9F,GAC9BD,KAAKG,SAAS,CAAE0G,UAAWA,EAAW5G,qB,+BAS9C,OACI,kBAACsB,EAAA,EAAD,KACI,kBAACO,EAAA,EAAD,SAAM,kBAACE,EAAA,EAAD,KAAK,yCAAL,MACN,kBAACF,EAAA,EAAD,KAEI,kBAACE,EAAA,EAAD,KACI,wBAAIM,MAAO,CAAEE,UAAW,uBAK/BxC,KAAK2G,iBACN,kBAAC7E,EAAA,EAAD,KAEI,kBAACE,EAAA,EAAD,KACI,wBAAIM,MAAO,CAAEE,UAAW,uBAI/BxC,KAAKyG,uBACLzG,KAAK0G,yBACL1G,KAAK4G,oBACN,kBAAC9E,EAAA,EAAD,KAEI,kBAACE,EAAA,EAAD,KACI,wBAAIM,MAAO,CAAEE,UAAW,uBAIhC,kBAACV,EAAA,EAAD,CAAKI,UAAU,cACX,kBAACF,EAAA,EAAD,KACI,kBAACgE,EAAA,EAAD,CAAQC,QAAQ,OAAOpE,QAAS7B,KAAKuG,iBAArC,gBAGR,kBAACzE,EAAA,EAAD,KAEI,kBAACE,EAAA,EAAD,KACI,wBAAIM,MAAO,CAAEE,UAAW,4B,GA/HL1C,IAAMqD,WCTlC,SAAS4D,IACpB,OAAO,kBAACxF,EAAA,EAAD,KACL,kDCUN,SAASyF,IACP,OACE,kBAACzF,EAAA,EAAD,KACE,kBAACO,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KACE,0CACF,kBAACA,EAAA,EAAD,sBAEF,kBAACF,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KACE,6CAEJ,kBAACF,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KACE,kBAACiF,EAAA,EAAD,CAAM3E,MAAO,CAAEC,MAAO,UACpB,kBAAC0E,EAAA,EAAKC,KAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,4BACA,kBAACF,EAAA,EAAK/C,KAAN,uDAGV,kBAAC,IAAD,CAAMkD,GAAG,YAAT,uBAKI,kBAACpF,EAAA,EAAD,KACE,kBAACiF,EAAA,EAAD,CAAM3E,MAAO,CAAEC,MAAO,UACpB,kBAAC0E,EAAA,EAAKC,KAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,mBACA,kBAACF,EAAA,EAAK/C,KAAN,kCAGV,kBAAC,IAAD,CAAMkD,GAAG,QAAT,iBCnCgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFuDD,WACb,OACE,kBAAC,IAAD,KACE,kBAACpG,EAAA,EAAD,KAIE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqG,KAAK,YACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,QACV,kBAACb,EAAD,OAEF,kBAAC,IAAD,CAAOa,KAAK,KACV,kBAACZ,EAAD,YEtEI,MAASa,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.25a85965.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Capture.dbd9b8b1.PNG\";","import React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Table from 'react-bootstrap/Table';\r\nimport SignatureCanvas from 'react-signature-canvas';\r\nimport ReactToPdf from \"react-to-pdf\";\r\nimport '../App.css';\r\nimport Capture from './Capture.PNG';\r\n\r\n\r\n\r\nexport default class InvoiceGeneration extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.getListOfProcedures = this.getListOfProcedures.bind(this);\r\n        this.PageRef = React.createRef();\r\n    }\r\n    componentDidMount() {\r\n        const {newProcedures, newPatient} = this.props;\r\n        this.setState({\r\n            invoiceId:(newPatient && newPatient.ptInvoice)? \"GPC:2020-21/\"+newPatient.ptInvoice: \"\",\r\n            invoiceDate:(newPatient && newPatient.ptDate)? newPatient.ptDate: \"\",\r\n            patientName: (newPatient && newPatient.ptName)? newPatient.ptName: \"\",\r\n            patientAge: (newPatient && newPatient.ptAge)? newPatient.ptAge: \"\",\r\n            patientAddress:(newPatient && newPatient.ptAddress)? newPatient.ptAddress: \"\",\r\n            procedureList: newProcedures\r\n        })\r\n    }\r\n\r\n\r\n    getListOfProcedures() {\r\n        const { procedureList = [] } = this.state\r\n        const procedureListView = []\r\n        let finalTotal = 0\r\n        procedureList.forEach((singleProcedure) => {\r\n            finalTotal += parseInt(singleProcedure.price);\r\n            procedureListView.push((\r\n                <tr>\r\n\r\n                    <td>{singleProcedure.name}</td>\r\n                    <td>{singleProcedure.price + \" \"} INR</td>\r\n                </tr>\r\n            ));\r\n        });\r\n        if (finalTotal > 0) {\r\n            procedureListView.push((\r\n                <tr>\r\n\r\n                    <td> Total </td>\r\n                    <td>{finalTotal + \" \"} INR</td>\r\n                </tr>\r\n            ));\r\n        }\r\n\r\n        return procedureListView;\r\n\r\n    }\r\n\r\n    render() {\r\n        let sigCanvas;\r\n        let bgImage = './Capture.PNG';\r\n        const options = {\r\n            orientation: 'portrait'\r\n        };\r\n        const { invoiceDate, patientName, patientAge, patientAddress, invoiceId } = this.state;\r\n        return <Container>\r\n            <h2> Invoice Generation</h2>\r\n\r\n            <ReactToPdf targetRef={this.PageRef} filename=\"div-blue.pdf\" options={options}  >\r\n                {({ toPdf }) => (\r\n                    <button onClick={toPdf}>Generate pdf</button>\r\n                )}\r\n            </ReactToPdf>\r\n            <Row ref={this.PageRef} >\r\n            <Col xs={10}>\r\n                <Row>\r\n\r\n                    <Col><hr></hr>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col >\r\n                        <div className=\"invoice-title\" >\r\n                        <Image src={Capture} style={{width:\"100%\"}} />\r\n                        </div>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Row>\r\n\r\n                    <Col>\r\n                        <hr style={{ borderTop: \"5px solid black\" }}>\r\n                        </hr>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={8} >\r\n                        <h4>Dr. Supriya Desai-Bamane </h4>\r\n                        <h5>M.S.(Gen. Surgery)</h5>\r\n                        <h6>Mob # 9673764418</h6>\r\n                    </Col>\r\n                    <Col>\r\n                <h5 className=\"justify-content-end\">ID # {invoiceId}</h5>\r\n                        <h6 className=\"justify-content-end\">Date: {invoiceDate}</h6>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <hr style={{ borderTop: \"5px solid black\" }}>\r\n                        </hr>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col>\r\n                        <h5 style={{ textDecoration: \"underline\" }}> Patient Details </h5>\r\n                        <h6 >Name: {patientName}</h6>\r\n                        <h6 >Age: {patientAge}</h6>\r\n                        <h6 >Address: {patientAddress}</h6>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n                <Row>\r\n                    <Col>\r\n                        <hr style={{ borderTop: \"5px solid black\" }}>\r\n                        </hr>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Procedures </th>\r\n                                    <th>Charges</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {this.getListOfProcedures()}\r\n                            </tbody>\r\n                        </Table>\r\n                    </Col>\r\n\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col>\r\n                        <hr style={{ borderTop: \"5px solid black\" }}>\r\n                        </hr>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n                <Row >\r\n                    <Col xs={5}  >\r\n\r\n                    </Col>\r\n                    <Col style={{ border: \"1px solid black\" }}>\r\n\r\n                        <SignatureCanvas penColor='blue'\r\n                            ref={(ref) => { sigCanvas = ref }}\r\n                            canvasProps={{ width: 500, height: 200, className: 'sigCanvas' }} />\r\n                        <div> Dr. Supriya Desai-Bamane</div>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <hr style={{ borderTop: \"2px solid black\" }}>\r\n                        </hr>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                    <h5 style={{textAlign:\"center\"}}> Have a Good Day! </h5>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                    <h6 style={{textAlign:\"center\"}}> In Surgery, it’s not about the wand, it’s all about the magician!!</h6>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                    <span>Address: Shop#6 , L square building,Ground floor,Behind orchid hospital ,Porwal road, ,Lohegaon Pune,\r\nMaharashtra 411032</span>\r\n                    </Col>\r\n                </Row>\r\n\r\n                \r\n                </Col>\r\n            </Row>\r\n\r\n        </Container>;\r\n    }\r\n}","import React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Row from 'react-bootstrap/Row';\r\nimport '../App.css';\r\n\r\nexport default class PatientDetailsComponent extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {};\r\n        this.handleChangePtName = this.handleChangePtName.bind(this);\r\n        this.handleChangePtAge = this.handleChangePtAge.bind(this);\r\n        this.handleChangePtAddress = this.handleChangePtAddress.bind(this);\r\n        this.handleDateChange = this.handleDateChange.bind(this);\r\n        this.handleChangePtInvoice = this.handleChangePtInvoice.bind(this);\r\n    }\r\n\r\n    handleChangePtInvoice(event) {\r\n        this.setState({ 'ptInvoice': event.target.value.toUpperCase() });\r\n    }\r\n    \r\n    handleDateChange(evt) {\r\n        this.setState({\r\n            ptDate: evt.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        this.setState({\r\n            ptName:'',\r\n            ptAge:'',\r\n            ptAddress:'',\r\n            ptDate: '',\r\n            ptInvoice:''\r\n        });\r\n    }\r\n\r\n    handleChangePtName(event){\r\n        this.setState({ 'ptName': event.target.value.toUpperCase() });\r\n    }\r\n    handleChangePtAge(event){\r\n        this.setState({ 'ptAge': event.target.value.toUpperCase() });\r\n    }\r\n    handleChangePtAddress(event){\r\n        this.setState({ 'ptAddress': event.target.value.toUpperCase() });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    <Col><h2> Patient Details </h2>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row className=\"paddingRow\">\r\n                    <Col>\r\n                        <InputGroup.Text id=\"basic-addon1\"> Date </InputGroup.Text>\r\n                    </Col>\r\n                    <Col>\r\n                        <input type=\"date\" value={this.state.ptDate} onChange={this.handleDateChange} />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"paddingRow\">\r\n                    <Col>\r\n                        <InputGroup.Text id=\"basic-addon1\"> Invoice ID </InputGroup.Text>\r\n                    </Col>\r\n                    <Col>\r\n                        <FormControl\r\n                            placeholder=\"INVOICE\"\r\n                            value={this.state.ptInvoice}\r\n                            onChange={this.handleChangePtInvoice}\r\n                        />\r\n\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row className=\"paddingRow\">\r\n                    <Col>\r\n                        <InputGroup.Text id=\"basic-addon1\"> Patient Name</InputGroup.Text>\r\n\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"paddingRow\">\r\n                    <Col>\r\n                        <FormControl\r\n                            placeholder=\"Pt Name\"\r\n                            aria-label=\"Patient\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            value={this.state.ptName}\r\n                            onChange={this.handleChangePtName}\r\n                        />\r\n\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row className=\"paddingRow\">\r\n                    <Col>\r\n                        <InputGroup.Text id=\"basic-addon1\"> Patient Age</InputGroup.Text>\r\n\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"paddingRow\">\r\n                    <Col>\r\n                        <FormControl\r\n                            placeholder=\"Pt Age\"\r\n                            aria-label=\"Patient\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            value={this.state.ptAge}\r\n                            onChange={this.handleChangePtAge}\r\n                        />\r\n\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row className=\"paddingRow\">\r\n                    <Col>\r\n                        <InputGroup.Text id=\"basic-addon1\"> Patient Address</InputGroup.Text>\r\n\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"paddingRow\">\r\n                    <Col>\r\n                        <FormControl as=\"textarea\" aria-label=\"With textarea\" \r\n                        value={this.state.ptAddress}\r\n                        onChange={this.handleChangePtAddress}\r\n                        />\r\n\r\n                    </Col>\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Col from 'react-bootstrap/Col';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Table from 'react-bootstrap/Table';\r\nimport '../App.css';\r\n\r\nexport default class ProcedureDetailsComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.saveProcedure = this.saveProcedure.bind(this);\r\n        this.getListOfProcedures = this.getListOfProcedures.bind(this);\r\n        this.getAddedProceduresView = this.getAddedProceduresView.bind(this);\r\n        this.handleProChange = this.handleProChange.bind(this);\r\n        this.handleChangeProName = this.handleChangeProName.bind(this);\r\n        this.handleChangeProCharge = this.handleChangeProCharge.bind(this);\r\n        this.removeProcedure = this.removeProcedure.bind(this);\r\n    }\r\n\r\n    getChildState() {\r\n        return this.state;\r\n    }\r\n    removeProcedure(id) {\r\n        const {addedList = []} = this.state;\r\n        let foundIndex = -1;\r\n        addedList.forEach((singleElement, index) =>{\r\n            if(singleElement.id == id){\r\n                foundIndex = index;\r\n            }\r\n        });\r\n        if(foundIndex !== -1){\r\n            addedList.splice(foundIndex, 1);\r\n            this.setState({\r\n                addedList \r\n            })\r\n        }\r\n    }\r\n\r\n    handleChangeProName(event) {\r\n        this.setState({ 'singleProName': event.target.value.toUpperCase() });\r\n    }\r\n    handleChangeProCharge(event) {\r\n        this.setState({ 'singleProCharges': event.target.value.toUpperCase() });\r\n    }\r\n\r\n    handleProChange(evt, key) {\r\n        this.setState({ [key]: evt.target.value.toUpperCase() });\r\n    }\r\n    componentDidMount() {\r\n        this.setState({\r\n            singleProCharges: 0,\r\n            singleProName: \"\",\r\n            addedList: []\r\n        });\r\n    }\r\n\r\n    saveProcedure() {\r\n        const { singleProCharges = 0, singleProName = \"\", addedList = [] } = this.state;\r\n        let newList = addedList;\r\n        if (singleProCharges && singleProCharges > 0 && singleProName) {\r\n            const timestamp = new Date().getUTCMilliseconds();\r\n            newList.push({\r\n                id:timestamp,\r\n                price: singleProCharges,\r\n                name: singleProName\r\n            });\r\n            console.log(newList);\r\n            this.setState({\r\n                singleProCharges: 0,\r\n                singleProName: \"\",\r\n                addedList: newList\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    getListOfProcedures() {\r\n        const { addedList = [] } = this.state;\r\n        const removeProcedure = this.removeProcedure;\r\n        const procedureListView = []\r\n        let finalTotal = 0\r\n        addedList.forEach((singleProcedure) => {\r\n            finalTotal += parseInt(singleProcedure.price);\r\n            procedureListView.push((\r\n                <tr key={singleProcedure.id}>\r\n\r\n                    <td>{singleProcedure.name}</td>\r\n                    <td>{singleProcedure.price + \" \"} INR</td>\r\n                    <td>\r\n                        <Button variant=\"danger\" size=\"sm\" onClick={()=>{\r\n                            removeProcedure(singleProcedure.id);\r\n                        }}>\r\n                            Delete\r\n                        </Button>\r\n                    </td>\r\n                </tr>\r\n            ));\r\n        });\r\n        if (finalTotal > 0) {\r\n            procedureListView.push((\r\n                <tr>\r\n\r\n                    <td> Total </td>\r\n                    <td>{finalTotal + \" \"} INR</td>\r\n                </tr>\r\n            ));\r\n        }\r\n\r\n        return procedureListView;\r\n    }\r\n    getAddedProceduresView() {\r\n        return (\r\n            <Row className=\"paddingRow\">\r\n                <Col>\r\n                    <Table striped bordered hover>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Procedures </th>\r\n                                <th>Charges</th>\r\n                                <th>Action</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.getListOfProcedures()}\r\n                        </tbody>\r\n                    </Table>\r\n                </Col>\r\n\r\n            </Row>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Row>\r\n                    <Col><h2> Procedure Details </h2>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {this.getAddedProceduresView()}\r\n\r\n                <Row className=\"paddingRow\">\r\n                    <Col>\r\n                        <InputGroup.Text id=\"basic-addon1\"> Producedure Name</InputGroup.Text>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"paddingRow\">\r\n                    <Col>\r\n                        <FormControl\r\n                            placeholder=\"Procedure\"\r\n                            aria-label=\"Patient\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            value={this.state.singleProName}\r\n                            onChange={this.handleChangeProName}\r\n                        />\r\n\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row className=\"paddingRow\">\r\n                    <Col>\r\n                        <InputGroup.Text id=\"basic-addon1\"> Producedure Charges</InputGroup.Text>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"paddingRow\">\r\n                    <Col>\r\n                        <FormControl\r\n                            placeholder=\"Charges\"\r\n                            aria-label=\"Patient\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            value={this.state.singleProCharges}\r\n                            onChange={this.handleChangeProCharge}\r\n                        />\r\n\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n\r\n                <Row className=\"paddingRow\">\r\n                    <Col md={6}>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                        <Button variant=\"outline-primary\" onClick={this.saveProcedure}>Save </Button>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport '../App.css';\r\nimport InvoiceGeneration from './InvoiceGeneration';\r\nimport PatientDetailsComponent from './PatientDetailsComponent';\r\nimport ProcedureDetailsComponent from './ProcedureDetailsComponent';\r\n\r\n\r\n\r\nexport default class CreateInvoice extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.patientDetailsRef = React.createRef();\r\n        this.procedureDetailsRef = React.createRef();\r\n        this.proceedNextStep = this.proceedNextStep.bind(this);\r\n        this.proceedBackStep = this.proceedBackStep.bind(this);\r\n        this.renderPatientDetails = this.renderPatientDetails.bind(this);\r\n        this.renderProcedureDetails = this.renderProcedureDetails.bind(this);\r\n        this.renderBackStep = this.renderBackStep.bind(this);\r\n        this.renderPreviewMode = this.renderPreviewMode.bind(this);\r\n    }\r\n\r\n    renderPreviewMode() {\r\n        let { pageState = 0, newProcedures = [], newPatient = {}  } = this.state;\r\n        if (pageState === 2) {\r\n            return (\r\n                <InvoiceGeneration newProcedures={newProcedures} newPatient={newPatient} />\r\n            )\r\n        }\r\n    }\r\n\r\n    renderBackStep() {\r\n        let { pageState = 0 } = this.state;\r\n        if (pageState !== 0) {\r\n            return (\r\n                <Row className=\"paddingRow\">\r\n                    <Col>\r\n                        <Button variant=\"dark\" onClick={this.proceedBackStep}>Back </Button>\r\n                    </Col>\r\n                </Row>\r\n            );\r\n        }\r\n    }\r\n    renderProcedureDetails() {\r\n        let { pageState = 0 } = this.state;\r\n        if (pageState === 1) {\r\n            return (\r\n                <ProcedureDetailsComponent ref={this.procedureDetailsRef} />\r\n            )\r\n        }\r\n    }\r\n\r\n    renderPatientDetails() {\r\n        let { pageState = 0 } = this.state;\r\n        if (pageState === 0) {\r\n            return (\r\n                <PatientDetailsComponent ref={this.patientDetailsRef} />\r\n            )\r\n        }\r\n    }\r\n    proceedBackStep() {\r\n        let { pageState = 0 } = this.state;\r\n\r\n        if (pageState >= 1) {\r\n            pageState--;\r\n            this.setState({ pageState })\r\n        }\r\n        console.log(\" STEP ## \", pageState);\r\n    }\r\n\r\n    proceedNextStep() {\r\n        let { pageState = 0 } = this.state;\r\n        let newProcedures = [];\r\n        let newPatient = {\r\n            ptName:'',\r\n            ptAge:'',\r\n            ptAddress:''\r\n        };\r\n        switch (pageState) {\r\n            case 0:\r\n                newPatient = {...this.patientDetailsRef.current.state};\r\n                pageState++;\r\n                console.log(\"newPatient::\",newPatient);\r\n                this.setState({ pageState: pageState,  newPatient });\r\n                break;\r\n            case 1:\r\n                newProcedures = this.procedureDetailsRef.current.state.addedList;\r\n                pageState++;\r\n                console.log(\"newProcedures::\",newProcedures);\r\n                this.setState({ pageState: pageState, newProcedures });\r\n                break;\r\n            case 2:\r\n\r\n                break;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Row> <Col><h1>GP Clinic</h1> </Col></Row>\r\n                <Row>\r\n\r\n                    <Col>\r\n                        <hr style={{ borderTop: \"5px solid black\" }}>\r\n                        </hr>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {this.renderBackStep()}\r\n                <Row>\r\n\r\n                    <Col>\r\n                        <hr style={{ borderTop: \"5px solid black\" }}>\r\n                        </hr>\r\n                    </Col>\r\n                </Row>\r\n                {this.renderPatientDetails()}\r\n                {this.renderProcedureDetails()}\r\n                {this.renderPreviewMode()}\r\n                <Row>\r\n\r\n                    <Col>\r\n                        <hr style={{ borderTop: \"5px solid black\" }}>\r\n                        </hr>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"paddingRow\">\r\n                    <Col>\r\n                        <Button variant=\"dark\" onClick={this.proceedNextStep}> Next Step</Button>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n\r\n                    <Col>\r\n                        <hr style={{ borderTop: \"5px solid black\" }}>\r\n                        </hr>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nexport default function SendMRI() {\r\n    return <Container>\r\n      <h2> SendMRI Sending </h2>\r\n    </Container>;\r\n  }","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\nimport CreateInvoice from './components/CreateInvoice';\nimport SendMRI from './components/SendMRI';\n\n\n\n\n\n\nfunction Home() {\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <h1>GP Clinic</h1></Col>\n        <Col>OPD Software</Col>\n      </Row>\n      <Row>\n        <Col>\n          <h2> Dashboard </h2></Col>\n      </Row>\n      <Row>\n        <Col>\n          <Card style={{ width: '18rem' }}>\n            <Card.Body>\n              <Card.Title>Invoice Generation </Card.Title>\n              <Card.Text>\n                Generate OPD invoice based on some requierment\n    </Card.Text>\n    <Link to=\"/invoice\">Generate Invoice</Link>\n    \n            </Card.Body>\n          </Card>\n        </Col>\n        <Col>\n          <Card style={{ width: '18rem' }}>\n            <Card.Body>\n              <Card.Title> Send MRI </Card.Title>\n              <Card.Text>\n                MRI to be sent like image\n    </Card.Text>\n    <Link to=\"/mri\">send MRI</Link>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n\n\n\n    </Container>\n  );\n}\n\n\n\nexport default function App() {\n  return (\n    <Router>\n      <Container>\n       \n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/invoice\">\n            <CreateInvoice />\n          </Route>\n          <Route path=\"/mri\">\n            <SendMRI />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Container>\n    </Router>\n  );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}