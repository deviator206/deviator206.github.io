{"version":3,"sources":["components/Capture.PNG","components/InvoiceGeneration.js","components/PatientDetailsComponent.js","components/ProcedureDetailsComponent.js","components/CreateInvoice.js","components/SendMRI.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","InvoiceGeneration","props","state","getListOfProcedures","bind","PageRef","React","createRef","convertToPDF","newPatient","this","savePDF","current","paperSize","scale","margin","left","right","fileName","ptInvoice","newProcedures","setState","invoiceId","invoiceDate","ptDate","patientName","ptName","patientAge","ptAge","patientAddress","ptAddress","procedureList","procedureListView","finalTotal","forEach","singleProcedure","parseInt","price","push","name","Container","onClick","Row","ref","Col","xs","className","style","backgroundImage","Capture","Table","borderTop","textDecoration","striped","bordered","hover","penColor","border","canvasProps","width","height","textAlign","Component","PatientDetailsComponent","handleChangePtName","handleChangePtAge","handleChangePtAddress","handleDateChange","handleChangePtInvoice","event","target","value","toUpperCase","evt","currentTarget","Fragment","InputGroup","Text","id","type","onChange","FormControl","placeholder","aria-label","aria-describedby","as","ProcedureDetailsComponent","saveProcedure","getAddedProceduresView","handleProChange","handleChangeProName","handleChangeProCharge","removeProcedure","addedList","foundIndex","singleElement","index","splice","key","singleProCharges","singleProName","newList","timestamp","Date","getUTCMilliseconds","console","log","Button","variant","size","md","CreateInvoice","patientDetailsRef","procedureDetailsRef","proceedNextStep","proceedBackStep","renderPatientDetails","renderProcedureDetails","renderBackStep","renderPreviewMode","pageState","SendMRI","Home","Card","Body","Title","to","Boolean","window","location","hostname","match","ReactDOM","render","basename","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08722479.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Capture.dbd9b8b1.PNG\";","import { savePDF } from '@progress/kendo-react-pdf';\nimport React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Table from 'react-bootstrap/Table';\nimport SignatureCanvas from 'react-signature-canvas';\nimport '../App.css';\nimport Capture from './Capture.PNG';\n\n\n\nexport default class InvoiceGeneration extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.getListOfProcedures = this.getListOfProcedures.bind(this);\n        this.PageRef = React.createRef();\n        this.convertToPDF = this.convertToPDF.bind(this);\n    }\n\n    convertToPDF1() {\n        const { newPatient } = this.props;\n        savePDF(this.PageRef.current, {\n            paperSize: \"A4\",\n            scale:0.7,\n            margin: {\n                left:20,\n                right:20\n            },\n            fileName: (newPatient && newPatient.ptInvoice) ? \"GPC_2020_21_\" + newPatient.ptInvoice + \".pdf\" : \"__invoice.pdf\",\n        })\n    }\n\n    convertToPDF() {\n        const { newPatient } = this.props;\n        savePDF(this.PageRef.current, {\n            paperSize: \"A4\",\n            scale:0.7,\n            margin: {\n                left:20,\n                right:20\n            },\n            fileName: (newPatient && newPatient.ptInvoice) ? \"GPC_2020_21_\" + newPatient.ptInvoice + \".pdf\" : \"__invoice.pdf\",\n        })\n    }\n\n    componentDidMount() {\n        const { newProcedures, newPatient } = this.props;\n        this.setState({\n            invoiceId: (newPatient && newPatient.ptInvoice) ? \"GPC:2020-21/\" + newPatient.ptInvoice : \"\",\n            invoiceDate: (newPatient && newPatient.ptDate) ? newPatient.ptDate : \"\",\n            patientName: (newPatient && newPatient.ptName) ? newPatient.ptName : \"\",\n            patientAge: (newPatient && newPatient.ptAge) ? newPatient.ptAge : \"\",\n            patientAddress: (newPatient && newPatient.ptAddress) ? newPatient.ptAddress : \"\",\n            procedureList: newProcedures\n        })\n    }\n\n    getListOfProcedures() {\n        const { procedureList = [] } = this.state\n        const procedureListView = []\n        let finalTotal = 0\n        procedureList.forEach((singleProcedure) => {\n            finalTotal += parseInt(singleProcedure.price);\n            procedureListView.push((\n                <tr>\n\n                    <td>{singleProcedure.name}</td>\n                    <td>{singleProcedure.price + \" \"} INR</td>\n                </tr>\n            ));\n        });\n        if (finalTotal > 0) {\n            procedureListView.push((\n                <tr>\n\n                    <td> Total </td>\n                    <td>{finalTotal + \" \"} INR</td>\n                </tr>\n            ));\n        }\n\n        return procedureListView;\n\n    }\n\n    render() {\n        let sigCanvas;\n\n        const options = {\n            orientation: 'portrait'\n        };\n        // \n        /**\n         <Image src={Capture} style={{width:\"100%\"}} />\n         <ReactToPdf targetRef={this.PageRef} filename=\"div-blue.pdf\" options={options}  >\n                {({ toPdf }) => (\n                    <button onClick={toPdf}>Generate pdf</button>\n                )}\n         </ReactToPdf>\n         */\n        const { invoiceDate, patientName, patientAge, patientAddress, invoiceId } = this.state;\n        return <Container>\n            <h2> Invoice Generation</h2>\n\n            \n\n            <button onClick={this.convertToPDF}>Save As pdf</button>\n\n\n            <Row ref={this.PageRef} >\n                <Col xs={10}>\n                    <Row>\n\n                        <Col><hr></hr>\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col >\n                            <div className=\"invoice-title gp-logo\" style={{ backgroundImage: \"url(\" + Capture + \")\" }} >\n\n                            </div>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                        <Table >\n                                <tbody>\n                                    <tr>\n                                    <td>\n                                    Dr.Supriya Desai- Bamane <br/>\n                                    M.S.(Gen. Surgery) <br/>\n                                    Mob # 9673764418\n                                    </td>\n                                    <td>\n                                    ID # {invoiceId} <br/>\n                                    Date: {invoiceDate}\n                                    </td>\n                                    </tr>\n                                </tbody>\n                            </Table>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <hr style={{ borderTop: \"5px solid black\" }}>\n                            </hr>\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col>\n                            <div style={{ textDecoration: \"underline\" }}> Patient Details </div>\n                            <div >Name: {patientName}</div>\n                            <div >Age: {patientAge}</div>\n                            <div>Address: {patientAddress}</div>\n                        </Col>\n                    </Row>\n\n\n                    <Row>\n                        <Col>\n                            <hr style={{ borderTop: \"5px solid black\" }}>\n                            </hr>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Table striped bordered hover>\n                                <thead>\n                                    <tr>\n                                        <th>Procedures </th>\n                                        <th>Charges</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {this.getListOfProcedures()}\n                                </tbody>\n                            </Table>\n                        </Col>\n\n                    </Row>\n\n                    <Row>\n                        <Col>\n                            <hr style={{ borderTop: \"5px solid black\" }}>\n                            </hr>\n                        </Col>\n                    </Row>\n\n\n                    <Row >\n                        <Col xs={5}  >\n\n                        </Col>\n                        <Col >\n\n                            <SignatureCanvas penColor='blue'\n                            style={{ border: \"1px solid black\" }}\n                                ref={(ref) => { sigCanvas = ref }}\n                                canvasProps={{ width: 500, height: 50, className: 'sigCanvas' }} />\n                            <div> Dr. Supriya Desai-Bamane</div>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <hr style={{ borderTop: \"2px solid black\" }}>\n                            </hr>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <h5 style={{ textAlign: \"center\" }}> Have a Good Day! </h5>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <h6 style={{ textAlign: \"center\" }}> In Surgery, it’s not about the wand, it’s all about the magician!!</h6>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <span>Address: Shop#6 , L square building,Ground floor,Behind orchid hospital ,Porwal road, ,Lohegaon Pune,\nMaharashtra 411032</span>\n                        </Col>\n                    </Row>\n\n\n                </Col>\n            </Row>\n\n        </Container>;\n    }\n}","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Row from 'react-bootstrap/Row';\nimport '../App.css';\n\nexport default class PatientDetailsComponent extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {};\n        this.handleChangePtName = this.handleChangePtName.bind(this);\n        this.handleChangePtAge = this.handleChangePtAge.bind(this);\n        this.handleChangePtAddress = this.handleChangePtAddress.bind(this);\n        this.handleDateChange = this.handleDateChange.bind(this);\n        this.handleChangePtInvoice = this.handleChangePtInvoice.bind(this);\n    }\n\n    handleChangePtInvoice(event) {\n        this.setState({ 'ptInvoice': event.target.value.toUpperCase() });\n    }\n    \n    handleDateChange(evt) {\n        this.setState({\n            ptDate: evt.currentTarget.value\n        })\n    }\n\n    componentDidMount() {\n        \n        this.setState({\n            ptName:'',\n            ptAge:'',\n            ptAddress:'',\n            ptDate: '',\n            ptInvoice:''\n        });\n    }\n\n    handleChangePtName(event){\n        this.setState({ 'ptName': event.target.value.toUpperCase() });\n    }\n    handleChangePtAge(event){\n        this.setState({ 'ptAge': event.target.value.toUpperCase() });\n    }\n    handleChangePtAddress(event){\n        this.setState({ 'ptAddress': event.target.value.toUpperCase() });\n    }\n    \n    render() {\n        return (\n            <React.Fragment>\n                <Row>\n                    <Col><h2> Patient Details </h2>\n                    </Col>\n                </Row>\n\n                <Row className=\"paddingRow\">\n                    <Col>\n                        <InputGroup.Text id=\"basic-addon1\"> Date </InputGroup.Text>\n                    </Col>\n                    <Col>\n                        <input type=\"date\" value={this.state.ptDate} onChange={this.handleDateChange} />\n                    </Col>\n                </Row>\n                <Row className=\"paddingRow\">\n                    <Col>\n                        <InputGroup.Text id=\"basic-addon1\"> Invoice ID </InputGroup.Text>\n                    </Col>\n                    <Col>\n                        <FormControl\n                            placeholder=\"INVOICE\"\n                            value={this.state.ptInvoice}\n                            onChange={this.handleChangePtInvoice}\n                        />\n\n                    </Col>\n                </Row>\n\n                <Row className=\"paddingRow\">\n                    <Col>\n                        <InputGroup.Text id=\"basic-addon1\"> Patient Name</InputGroup.Text>\n\n                    </Col>\n                </Row>\n                <Row className=\"paddingRow\">\n                    <Col>\n                        <FormControl\n                            placeholder=\"Pt Name\"\n                            aria-label=\"Patient\"\n                            aria-describedby=\"basic-addon1\"\n                            value={this.state.ptName}\n                            onChange={this.handleChangePtName}\n                        />\n\n                    </Col>\n                </Row>\n\n                <Row className=\"paddingRow\">\n                    <Col>\n                        <InputGroup.Text id=\"basic-addon1\"> Patient Age</InputGroup.Text>\n\n                    </Col>\n                </Row>\n                <Row className=\"paddingRow\">\n                    <Col>\n                        <FormControl\n                            placeholder=\"Pt Age\"\n                            aria-label=\"Patient\"\n                            aria-describedby=\"basic-addon1\"\n                            value={this.state.ptAge}\n                            onChange={this.handleChangePtAge}\n                        />\n\n                    </Col>\n                </Row>\n\n                <Row className=\"paddingRow\">\n                    <Col>\n                        <InputGroup.Text id=\"basic-addon1\"> Patient Address</InputGroup.Text>\n\n                    </Col>\n                </Row>\n                <Row className=\"paddingRow\">\n                    <Col>\n                        <FormControl as=\"textarea\" aria-label=\"With textarea\" \n                        value={this.state.ptAddress}\n                        onChange={this.handleChangePtAddress}\n                        />\n\n                    </Col>\n                </Row>\n            </React.Fragment>\n        );\n    }\n\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Row from 'react-bootstrap/Row';\nimport Table from 'react-bootstrap/Table';\nimport '../App.css';\n\nexport default class ProcedureDetailsComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.saveProcedure = this.saveProcedure.bind(this);\n        this.getListOfProcedures = this.getListOfProcedures.bind(this);\n        this.getAddedProceduresView = this.getAddedProceduresView.bind(this);\n        this.handleProChange = this.handleProChange.bind(this);\n        this.handleChangeProName = this.handleChangeProName.bind(this);\n        this.handleChangeProCharge = this.handleChangeProCharge.bind(this);\n        this.removeProcedure = this.removeProcedure.bind(this);\n    }\n\n    getChildState() {\n        return this.state;\n    }\n    removeProcedure(id) {\n        const {addedList = []} = this.state;\n        let foundIndex = -1;\n        addedList.forEach((singleElement, index) =>{\n            if(singleElement.id == id){\n                foundIndex = index;\n            }\n        });\n        if(foundIndex !== -1){\n            addedList.splice(foundIndex, 1);\n            this.setState({\n                addedList \n            })\n        }\n    }\n\n    handleChangeProName(event) {\n        this.setState({ 'singleProName': event.target.value.toUpperCase() });\n    }\n    handleChangeProCharge(event) {\n        this.setState({ 'singleProCharges': event.target.value.toUpperCase() });\n    }\n\n    handleProChange(evt, key) {\n        this.setState({ [key]: evt.target.value.toUpperCase() });\n    }\n    componentDidMount() {\n        this.setState({\n            singleProCharges: 0,\n            singleProName: \"\",\n            addedList: []\n        });\n    }\n\n    saveProcedure() {\n        const { singleProCharges = 0, singleProName = \"\", addedList = [] } = this.state;\n        let newList = addedList;\n        if (singleProCharges && singleProCharges > 0 && singleProName) {\n            const timestamp = new Date().getUTCMilliseconds();\n            newList.push({\n                id:timestamp,\n                price: singleProCharges,\n                name: singleProName\n            });\n            console.log(newList);\n            this.setState({\n                singleProCharges: 0,\n                singleProName: \"\",\n                addedList: newList\n            });\n        }\n\n    }\n\n    getListOfProcedures() {\n        const { addedList = [] } = this.state;\n        const removeProcedure = this.removeProcedure;\n        const procedureListView = []\n        let finalTotal = 0\n        addedList.forEach((singleProcedure) => {\n            finalTotal += parseInt(singleProcedure.price);\n            procedureListView.push((\n                <tr key={singleProcedure.id}>\n\n                    <td>{singleProcedure.name}</td>\n                    <td>{singleProcedure.price + \" \"} INR</td>\n                    <td>\n                        <Button variant=\"danger\" size=\"sm\" onClick={()=>{\n                            removeProcedure(singleProcedure.id);\n                        }}>\n                            Delete\n                        </Button>\n                    </td>\n                </tr>\n            ));\n        });\n        if (finalTotal > 0) {\n            procedureListView.push((\n                <tr>\n\n                    <td> Total </td>\n                    <td>{finalTotal + \" \"} INR</td>\n                </tr>\n            ));\n        }\n\n        return procedureListView;\n    }\n    getAddedProceduresView() {\n        return (\n            <Row className=\"paddingRow\">\n                <Col>\n                    <Table striped bordered hover>\n                        <thead>\n                            <tr>\n                                <th>Procedures </th>\n                                <th>Charges</th>\n                                <th>Action</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.getListOfProcedures()}\n                        </tbody>\n                    </Table>\n                </Col>\n\n            </Row>\n        )\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Row>\n                    <Col><h2> Procedure Details </h2>\n                    </Col>\n                </Row>\n\n                {this.getAddedProceduresView()}\n\n                <Row className=\"paddingRow\">\n                    <Col>\n                        <InputGroup.Text id=\"basic-addon1\"> Producedure Name</InputGroup.Text>\n                    </Col>\n                </Row>\n                <Row className=\"paddingRow\">\n                    <Col>\n                        <FormControl\n                            placeholder=\"Procedure\"\n                            aria-label=\"Patient\"\n                            aria-describedby=\"basic-addon1\"\n                            value={this.state.singleProName}\n                            onChange={this.handleChangeProName}\n                        />\n\n                    </Col>\n                </Row>\n\n                <Row className=\"paddingRow\">\n                    <Col>\n                        <InputGroup.Text id=\"basic-addon1\"> Producedure Charges</InputGroup.Text>\n                    </Col>\n                </Row>\n                <Row className=\"paddingRow\">\n                    <Col>\n                        <FormControl\n                            placeholder=\"Charges\"\n                            aria-label=\"Patient\"\n                            aria-describedby=\"basic-addon1\"\n                            value={this.state.singleProCharges}\n                            onChange={this.handleChangeProCharge}\n                        />\n\n                    </Col>\n                </Row>\n\n\n\n                <Row className=\"paddingRow\">\n                    <Col md={6}>\n                    </Col>\n                    <Col md={3}>\n                    </Col>\n                    <Col md={3}>\n                        <Button variant=\"outline-primary\" onClick={this.saveProcedure}>Save </Button>\n                    </Col>\n                </Row>\n\n            </React.Fragment>\n        );\n    }\n\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport '../App.css';\nimport InvoiceGeneration from './InvoiceGeneration';\nimport PatientDetailsComponent from './PatientDetailsComponent';\nimport ProcedureDetailsComponent from './ProcedureDetailsComponent';\n\n\n\nexport default class CreateInvoice extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.patientDetailsRef = React.createRef();\n        this.procedureDetailsRef = React.createRef();\n        this.proceedNextStep = this.proceedNextStep.bind(this);\n        this.proceedBackStep = this.proceedBackStep.bind(this);\n        this.renderPatientDetails = this.renderPatientDetails.bind(this);\n        this.renderProcedureDetails = this.renderProcedureDetails.bind(this);\n        this.renderBackStep = this.renderBackStep.bind(this);\n        this.renderPreviewMode = this.renderPreviewMode.bind(this);\n    }\n\n    renderPreviewMode() {\n        let { pageState = 0, newProcedures = [], newPatient = {}  } = this.state;\n        if (pageState === 2) {\n            return (\n                <InvoiceGeneration newProcedures={newProcedures} newPatient={newPatient} />\n            )\n        }\n    }\n\n    renderBackStep() {\n        let { pageState = 0 } = this.state;\n        if (pageState !== 0) {\n            return (\n                <Row className=\"paddingRow\">\n                    <Col>\n                        <Button variant=\"dark\" onClick={this.proceedBackStep}>Back </Button>\n                    </Col>\n                </Row>\n            );\n        }\n    }\n    renderProcedureDetails() {\n        let { pageState = 0 } = this.state;\n        if (pageState === 1) {\n            return (\n                <ProcedureDetailsComponent ref={this.procedureDetailsRef} />\n            )\n        }\n    }\n\n    renderPatientDetails() {\n        let { pageState = 0 } = this.state;\n        if (pageState === 0) {\n            return (\n                <PatientDetailsComponent ref={this.patientDetailsRef} />\n            )\n        }\n    }\n    proceedBackStep() {\n        let { pageState = 0 } = this.state;\n\n        if (pageState >= 1) {\n            pageState--;\n            this.setState({ pageState })\n        }\n        console.log(\" STEP ## \", pageState);\n    }\n\n    proceedNextStep() {\n        let { pageState = 0 } = this.state;\n        let newProcedures = [];\n        let newPatient = {\n            ptName:'',\n            ptAge:'',\n            ptAddress:''\n        };\n        switch (pageState) {\n            case 0:\n                newPatient = {...this.patientDetailsRef.current.state};\n                pageState++;\n                console.log(\"newPatient::\",newPatient);\n                this.setState({ pageState: pageState,  newPatient });\n                break;\n            case 1:\n                newProcedures = this.procedureDetailsRef.current.state.addedList;\n                pageState++;\n                console.log(\"newProcedures::\",newProcedures);\n                this.setState({ pageState: pageState, newProcedures });\n                break;\n            case 2:\n\n                break;\n        }\n    }\n\n    render() {\n        return (\n            <Container>\n                <Row> <Col><h1>GP Clinic</h1> </Col></Row>\n                <Row>\n\n                    <Col>\n                        <hr style={{ borderTop: \"5px solid black\" }}>\n                        </hr>\n                    </Col>\n                </Row>\n\n                {this.renderBackStep()}\n                <Row>\n\n                    <Col>\n                        <hr style={{ borderTop: \"5px solid black\" }}>\n                        </hr>\n                    </Col>\n                </Row>\n                {this.renderPatientDetails()}\n                {this.renderProcedureDetails()}\n                {this.renderPreviewMode()}\n                <Row>\n\n                    <Col>\n                        <hr style={{ borderTop: \"5px solid black\" }}>\n                        </hr>\n                    </Col>\n                </Row>\n                <Row className=\"paddingRow\">\n                    <Col>\n                        <Button variant=\"dark\" onClick={this.proceedNextStep}> Next Step</Button>\n                    </Col>\n                </Row>\n                <Row>\n\n                    <Col>\n                        <hr style={{ borderTop: \"5px solid black\" }}>\n                        </hr>\n                    </Col>\n                </Row>\n\n            </Container>\n        );\n    }\n}","import React from 'react';\nimport Container from 'react-bootstrap/Container';\n\nexport default function SendMRI() {\n    return <Container>\n      <h2> SendMRI Sending </h2>\n    </Container>;\n  }","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\nimport CreateInvoice from './components/CreateInvoice';\nimport SendMRI from './components/SendMRI';\n\n\n\n\n\n\nfunction Home() {\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <h1>GP Clinic</h1></Col>\n        <Col>OPD Software</Col>\n      </Row>\n      <Row>\n        <Col>\n          <h2> Dashboard </h2></Col>\n      </Row>\n      <Row>\n        <Col>\n          <Card style={{ width: '18rem' }}>\n            <Card.Body>\n              <Card.Title>Invoice Generation </Card.Title>\n              <Card.Text>\n                Generate OPD invoice based on some requierment\n    </Card.Text>\n              <Link to=\"/invoice\">Generate Invoice</Link>\n\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col>\n          <Card style={{ width: '18rem' }}>\n            <Card.Body>\n              <Card.Title> Send MRI </Card.Title>\n              <Card.Text>\n                MRI to be sent like image\n    </Card.Text>\n              <Link to=\"/mri\">send MRI</Link>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n\n\n\n    </Container>\n  );\n}\n\n\n\nexport default function App() {\n  \n  return (\n    <Router basename=\"/gpc\">\n      <Container>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/invoice\">\n            <CreateInvoice />\n          </Route>\n          <Route path=\"/mri\">\n            <SendMRI />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Container>\n    </Router>\n  );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}