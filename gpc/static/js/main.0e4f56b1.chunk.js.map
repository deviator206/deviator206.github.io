{"version":3,"sources":["components/Capture.PNG","components/InvoiceGeneration.js","components/SendMRI.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","InvoiceGeneration","props","state","getListOfProcedures","bind","PageRef","React","createRef","this","setState","invoiceId","invoiceDate","patientName","patientAge","patientAddress","procedureList","procedureListView","finalTotal","forEach","singleProcedure","parseInt","price","push","name","Container","targetRef","filename","options","orientation","toPdf","onClick","Row","ref","Col","xs","className","Image","src","Capture","style","width","borderTop","textDecoration","Table","striped","bordered","hover","border","penColor","canvasProps","height","textAlign","Component","SendMRI","Home","Card","Body","Title","Text","to","Boolean","window","location","hostname","match","ReactDOM","render","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e4f56b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Capture.dbd9b8b1.PNG\";","import React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Table from 'react-bootstrap/Table';\r\nimport SignatureCanvas from 'react-signature-canvas';\r\nimport ReactToPdf from \"react-to-pdf\";\r\nimport '../App.css';\r\nimport Capture from './Capture.PNG';\r\n\r\n\r\n\r\nexport default class InvoiceGeneration extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.getListOfProcedures = this.getListOfProcedures.bind(this);\r\n        this.PageRef = React.createRef();\r\n    }\r\n    componentDidMount() {\r\n\r\n        this.setState({\r\n            invoiceId:\"GPC:2020-21/0001\",\r\n            invoiceDate: \" 02 Jan 2020\",\r\n            patientName: \"Mrs Arti Katare\",\r\n            patientAge: \"38yrs\",\r\n            patientAddress: \"Pride World City, Lohegaon,Pune \",\r\n            procedureList: [\r\n                {\r\n                    \"name\": \"Consultation\",\r\n                    \"price\": \"300\"\r\n                },\r\n                {\r\n                    \"name\": \"Corn excission\",\r\n                    \"price\": \"1200\"\r\n                },\r\n                \r\n                {\r\n                    \"name\": \"Dressing (x5)\",\r\n                    \"price\": \"500\"\r\n                }\r\n            ]\r\n        })\r\n    }\r\n\r\n\r\n    getListOfProcedures() {\r\n        const { procedureList = [] } = this.state\r\n        const procedureListView = []\r\n        let finalTotal = 0\r\n        procedureList.forEach((singleProcedure) => {\r\n            finalTotal += parseInt(singleProcedure.price);\r\n            procedureListView.push((\r\n                <tr>\r\n\r\n                    <td>{singleProcedure.name}</td>\r\n                    <td>{singleProcedure.price + \" \"} INR</td>\r\n                </tr>\r\n            ));\r\n        });\r\n        if (finalTotal > 0) {\r\n            procedureListView.push((\r\n                <tr>\r\n\r\n                    <td> Total </td>\r\n                    <td>{finalTotal + \" \"} INR</td>\r\n                </tr>\r\n            ));\r\n        }\r\n\r\n        return procedureListView;\r\n\r\n    }\r\n\r\n    render() {\r\n        let sigCanvas;\r\n        let bgImage = './Capture.PNG';\r\n        const options = {\r\n            orientation: 'portrait'\r\n        };\r\n        const { invoiceDate, patientName, patientAge, patientAddress, invoiceId } = this.state;\r\n        return <Container>\r\n            <h2> Invoice Generation</h2>\r\n\r\n            <ReactToPdf targetRef={this.PageRef} filename=\"div-blue.pdf\" options={options}  >\r\n                {({ toPdf }) => (\r\n                    <button onClick={toPdf}>Generate pdf</button>\r\n                )}\r\n            </ReactToPdf>\r\n            <Row ref={this.PageRef} >\r\n            <Col xs={10}>\r\n                <Row>\r\n\r\n                    <Col><hr></hr>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col >\r\n                        <div className=\"invoice-title\" >\r\n                        <Image src={Capture} style={{width:\"100%\"}} />\r\n                        </div>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Row>\r\n\r\n                    <Col>\r\n                        <hr style={{ borderTop: \"5px solid black\" }}>\r\n                        </hr>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={8} >\r\n                        <h4>Dr. Supriya Desai-Bamane </h4>\r\n                        <h5>M.S.(Gen. Surgery)</h5>\r\n                        <h6>Mob # 9673764418</h6>\r\n                    </Col>\r\n                    <Col>\r\n                <h5 className=\"justify-content-end\">ID # {invoiceId}</h5>\r\n                        <h6 className=\"justify-content-end\">Date: {invoiceDate}</h6>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <hr style={{ borderTop: \"5px solid black\" }}>\r\n                        </hr>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col>\r\n                        <h5 style={{ textDecoration: \"underline\" }}> Patient Details </h5>\r\n                        <h6 >Name: {patientName}</h6>\r\n                        <h6 >Age: {patientAge}</h6>\r\n                        <h6 >Address: {patientAddress}</h6>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n                <Row>\r\n                    <Col>\r\n                        <hr style={{ borderTop: \"5px solid black\" }}>\r\n                        </hr>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Procedures </th>\r\n                                    <th>Pricing</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {this.getListOfProcedures()}\r\n                            </tbody>\r\n                        </Table>\r\n                    </Col>\r\n\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col>\r\n                        <hr style={{ borderTop: \"5px solid black\" }}>\r\n                        </hr>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n                <Row >\r\n                    <Col xs={5}  >\r\n\r\n                    </Col>\r\n                    <Col style={{ border: \"1px solid black\" }}>\r\n\r\n                        <SignatureCanvas penColor='blue'\r\n                            ref={(ref) => { sigCanvas = ref }}\r\n                            canvasProps={{ width: 500, height: 200, className: 'sigCanvas' }} />\r\n                        <div> Dr. Supriya Desai-Bamane</div>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <hr style={{ borderTop: \"2px solid black\" }}>\r\n                        </hr>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                    <h5 style={{textAlign:\"center\"}}> Have a Good Day! </h5>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                    <h6 style={{textAlign:\"center\"}}> In Surgery, it’s not about the wand, it’s all about the magician!!</h6>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                    <span>Address: Shop#6 , L square building,Ground floor,Behind orchid hospital ,Porwal road, ,Lohegaon Pune,\r\nMaharashtra 411032</span>\r\n                    </Col>\r\n                </Row>\r\n\r\n                \r\n                </Col>\r\n            </Row>\r\n\r\n        </Container>;\r\n    }\r\n}","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nexport default function SendMRI() {\r\n    return <Container>\r\n      <h2> SendMRI Sending </h2>\r\n    </Container>;\r\n  }","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\nimport InvoiceGeneration from './components/InvoiceGeneration';\nimport SendMRI from './components/SendMRI';\n\n\n\n\n\n\nfunction Home() {\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <h1>GP Clinic</h1></Col>\n        <Col>OPD Software</Col>\n      </Row>\n      <Row>\n        <Col>\n          <h2> Dashboard </h2></Col>\n      </Row>\n      <Row>\n        <Col>\n          <Card style={{ width: '18rem' }}>\n            <Card.Body>\n              <Card.Title>Invoice Generation </Card.Title>\n              <Card.Text>\n                Generate OPD invoice based on some requierment\n    </Card.Text>\n    <Link to=\"/invoice\">Generate Invoice</Link>\n    \n            </Card.Body>\n          </Card>\n        </Col>\n        <Col>\n          <Card style={{ width: '18rem' }}>\n            <Card.Body>\n              <Card.Title> Send MRI </Card.Title>\n              <Card.Text>\n                MRI to be sent like image\n    </Card.Text>\n    <Link to=\"/mri\">send MRI</Link>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n\n\n\n    </Container>\n  );\n}\n\n\n\nexport default function App() {\n  return (\n    <Router>\n      <Container>\n       \n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/invoice\">\n            <InvoiceGeneration />\n          </Route>\n          <Route path=\"/mri\">\n            <SendMRI />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Container>\n    </Router>\n  );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}